#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('sale-api:server');
const http = require('http');
const socketIO = require('socket.io');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

const io = socketIO(server, {
  cors: {
    origin: "https://www.nintshop.com",
    // origin: "http://localhost:4200",
    methods: ["GET", "POST"],
    allowedHeaders: ["my-custom-header"],
    credentials: true
  }
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Lưu trữ vị trí của tất cả user đang kết nối
let users = {};

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  socket.on('new-user', (data) => {
    users[socket.id] = { username: data.username, position: data.position };
    io.emit('update-users', users);
  });

  socket.on('move', (data) => {
    if (users[socket.id]) {
      users[socket.id].position = data.position;
      io.emit('update-users', users); // Gửi thông tin mới đến tất cả các client
    }
  });

  socket.on('disconnect', () => {
    delete users[socket.id];
    io.emit('update-users', users); // Cập nhật danh sách khi có user rời đi
    console.log('User disconnected:', socket.id);
  });
});
